declare type Obj<T = any> = Record<string, T>;
export declare type Next<T> = (state?: Partial<T>) => void;
export declare type Task<T extends Obj = Obj, O extends Obj = Obj> = (state: T, context: {
    next: Next<O & T>;
    skip: Next<O & T>;
}) => void;
export interface TaskItem<T extends Obj = Obj, O extends Obj = Obj> {
    /**
     * 任务描述
     */
    description: string;
    /**
     * 任务
     */
    fn: Task<T, O>;
}
export declare class PipeLine<T extends Obj> {
    private headPoint;
    private workinPoint;
    private checkoutPoint;
    private prevState;
    constructor();
    private enqueueTask;
    tap<O extends Obj>(description: string, fn: TaskItem<T, O>['fn']): PipeLine<T & O>;
    /**
     * 跳过下一个任务
     * @param state
     */
    private skip;
    /**
     * 执行下一个任务
     * @param state
     */
    private next;
    /**
     * 开始执行任务
     * @param context
     * @returns
     */
    run(context?: T): void;
    private processWork;
}
export {};
